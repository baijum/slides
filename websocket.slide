Gorilla Websocket
5 September 2015

Baiju Muthukadan
ZeOmega
http://muthukadan.net

* Websocket

- A full-duplex single socket connection
- Alternative to HTTP polling
- Two-way communication between client and server
- [[http://caniuse.com/#feat=websockets][Can I use Websockets?]]

* Spec

- The WebSocket Protocol: [[https://tools.ietf.org/html/rfc6455][RFC 6455]]
- The WebSocket API: [[http://www.w3.org/TR/websockets]]

* Gorilla Project

- A web toolkit (not a framework!)
- Packages: context, mux, websocket etc.
- Licensed under the New BSD License.
- Website: [[http://www.gorillatoolkit.org]]

* Gorilla Websocket

- Implements the WebSocket protocol defined in [[https://tools.ietf.org/html/rfc6455][RFC 6455]]
- Installation:

  go get github.com/gorilla/websocket

- Documentation: [[http://godoc.org/github.com/gorilla/websocket]]
- Alternative: [[http://godoc.org/golang.org/x/net/websocket][golang.org/x/net/websocket]]

* Basic Example Usage

.code gorilla_websocket/example1.html

* Backend

.code gorilla_websocket/example1.go /START UPGRADER/,/END UPGRADER/

* Backend Contd.

.code gorilla_websocket/example1.go /START SERVE/,/END SERVE/

* Backend Contd.

.code gorilla_websocket/example1.go /START WRITER/,/END WRITER/

* Backend Contd.

.code gorilla_websocket/example1.go /START READER/,/END READER/

* WebSocket Constructor

    WebSocket(
      DOMString url,
      optional (DOMString or DOMString[]) protocols
    )

- url: URL to which the WebSocket server will respond
- protocols (optional): a single protocol string or an array of protocol strings used to indicate sub-protocols
- The constructor can throw exception
- event with the name "error" is sent to the WebSocket object (thereby invoking its `onerror` handler)
- the CloseEvent is sent to the WebSocket object (thereby invoking its `onclose` handler)

* WebSocket Connection Examples

    var conn = new WebSocket("ws://example.com/ws")

    var conn = new WebSocket("ws://example.com/ws", "protocolOne");

    var conn = new WebSocket("ws://example.com/ws", ["protocolOne", "protocolTwo"]);

- `ws` has replaced `http`, similarly `wss` replaces `https`
- On return, `conn.readyState` is `CONNECTING`
- The `readyState` will become `OPEN` once the connection is ready to transfer data
- `conn.protocol` gives which protocol the server selected (once `readyState` is `OPEN`)

* Sending data to the server

- call the WebSocket object's `send()` method for each message you want to send

    conn.send("Some text to be send to sevrver")

- You can send data as a string, Blob, or ArrayBuffer.

    conn.onopen = function (event) {
        conn.send("Some text to be send to sevrver")
    }

- Using JSON

    conn.send(JSON.stringify(msg))

* Receiving messages from the server

- WebSockets is an event-driven API
- when messages are received, a "message" event is delivered to the `onmessage` function.
- To begin listening for incoming data, you can do something like this:

    conn.onmessage = function (event) {
        console.log(event.data);
    }

* Closing the connection

    conn.close()

- examine the socket's bufferedAmount attribute before attempting to close the connection to determine if any data has yet to be transmitted on the network.

* Code Walkthrough

- Webtail - tool to stream file content to web
- Git repo: [[https://github.com/baijum/webtail]]
